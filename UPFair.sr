resource UBprob()
	# Uppgift 3. 
	
	const m : int := 10  		#Number of men
	const w : int := 10  		#Number of women	
	var blocked[m + w] : int	#Number of blocked processes

	var dm: int := 0
	var dw: int := 0			#Men and women waiting.

	var nm: int := 0
	var nw: int := 0			#Men and women in bathroom. 
	var queue[m + w + 1] : int	#Ready queue
	
	var id : int := 0			# GLOBAL PROCESS ID, DO NOT TOUCH
	var femQueue[w]: int		# Female queue
	var maleQueue[m] : int 		# Male queue
	
	var currentMQueue : int := 0
	var currentFQueue : int := 0
	
	#Semaphores
	sem mutex  := 1
	sem Men_Guard := 0
	sem Women_Guard := 0

	var ncm: int := 0			# Completed men
	var ncw: int := 0			# Completed women
	
	var menTurn: bool := true	# Whose turn it is (male or female)

	procedure shrinkQueue( var p[m] : int; var isMale : bool )returns newArray[m] : int
		var temp : int := p[1]
		fa  i := 1 to m ->
			if(i < 10) ->
				newArray[i] := p[i+1];
			[] (i = 10) ->
				newArray[i] := temp
			fi
		af	
			if (isMale = true) ->
				currentMQueue--
			[] (isMale = false) ->
				currentFQueue--
			fi
	end
	
	procedure addToQueue(  var pid : int; var isMale : bool )
		if(isMale = true) ->
			maleQueue[currentMQueue + 1] := pid
			currentMQueue++

		[](isMale = false) ->
			femQueue[currentFQueue + 1] := pid
			currentFQueue++
			
		fi

	end	
	
	procedure createID() returns pid : int
		pid := id++
	end
	
	procedure signal()
		if(nw = 0 and dm > 0) ->
			dm--
			V(Men_Guard)
		[](nm = 0 and dw > 0) ->
			dw--
			V(Women_Guard)
		[] (nw > 0 or dm = 0) and (nm > 0 or dw = 0) ->
			V(mutex)
		fi
	end   
	
	
	process Man(i := 1 to m)
		
		var q : bool := true
		P(mutex)
		var mPID : int := createID()
		write ("Created id Man", mPID)
		addToQueue( mPID, q)
		V(mutex)
		do true -> 			
			P(mutex)
			#write("Took mutex")
			if(nw > 0) ->
				dm++				
				V(mutex)
				P(Men_Guard) 
			fi
			
			#If number of men is higher than 4 then nap (waiting)
			do (nm >= 4) ->
				V(mutex)	#Need to mutex to compare or two men can enter bathroom
				nap(125)
				P(mutex)	#Grab mutex again so we can test number of men again
			od
			
			do (ncm >= ncw + 4) ->
				menTurn := false
				V(mutex)
				nap(125)
				P(mutex)
			od
			
			
			# If it's this process turn to run.
			#If menTurn is true and you are in the first 4 in queue and less than 4 men 
			fa x := 1 to 4 ->
			if(mPID = maleQueue[x] and nm <= 4 and menTurn = true) ->
			
				nm++
				signal() #Stuff to be made.
				
				nap(int(random(50,500)))
				write("Man is in bathroom. No. " , nm, " pid " , mPID)
				
				P(mutex)
				ncm++
				nm--
				
				maleQueue := shrinkQueue(maleQueue,q)
				signal() #Stuff again?	
				
				write("Man goes out and left", nm)
				nap(int(random(100,1000)))
			
			[] else ->
				signal()
			fi
			af
		od
	end 

	process Woman(j := 1 to w)
	
		var q : bool := false
		P(mutex)
		var mPID : int := createID()
		write("Created id Female", mPID)
		addToQueue( mPID, q)
		V(mutex)
		do true -> 
			P(mutex)
			
			if(nm > 0) ->
			
				dw++				
				V(mutex)
				P(Women_Guard) 
			fi
			
			do (nw >= 4) ->
				V(mutex)
				nap(125)
				P(mutex)	
			od
			
			do(ncw >= ncm + 4) ->
				menTurn := true
				V(mutex)
				nap(125)
				P(mutex)	
			od
			
			fa x := 1 to 4 ->
			# Checks if it's this process turn to run. 	
			#If menTurn is false, if first 4 and women less than 4
			if(mPID = femQueue[x] and nw <= 4 and menTurn = false) ->
			
				nw++
				signal()
				nap(int(random(50,500)))
			
				write("Woman in bathroom. No" , nw, " pid " , mPID)
				P(mutex)

				ncw++
				nw--
				
				femQueue := shrinkQueue(femQueue,q)
				signal()
				
				write("Female goes out and no left", nw)
				nap(int(random(100,1000)))
			[] else ->
				signal()
			fi
			af
		# Tvättar händerna.
		od
	end 

	
end UBprob