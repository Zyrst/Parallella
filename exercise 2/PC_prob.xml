<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>//Insert declarations of global clocks, variables, constants and channels.
urgent chan Go;

const int n := 10;					//Defines the size of arrays
int in_array[n] := { 1, 7, 4, 32, 54, 9, 18, 97, 44, 16}; //Producer reads from this instead of stdin
int out_array[n];					//Consumer prints to this instead of stdout
int buff;
int[0,n] p := 0;
int[0,n] c := 0;</declaration><template><name x="5" y="5">Producer</name><declaration>//Insert local declarations of clocks, variables and constants.
int a[n];
int i := 0;			//counters must be declared in Uppaal
bool end := false;</declaration><location id="id0" x="104" y="360"></location><location id="id1" x="104" y="360"><name x="128" y="352">FULL</name></location><location id="id2" x="104" y="272"></location><location id="id3" x="112" y="96"></location><location id="id4" x="-40" y="272"><name x="-50" y="242">WAIT</name></location><location id="id5" x="-40" y="400"><name x="-88" y="392">CS</name></location><location id="id6" x="248" y="168"><name x="238" y="138">Start</name></location><location id="id7" x="248" y="272"></location><init ref="id6"/><transition><source ref="id4"/><target ref="id2"/><label kind="guard" x="-48" y="200">p &gt; c</label><label kind="synchronisation" x="-48" y="215">Go !</label><nail x="-148" y="118"/><nail x="28" y="118"/></transition><transition><source ref="id2"/><target ref="id1"/><label kind="guard" x="120" y="288">p == n</label><label kind="synchronisation" x="120" y="304">Go !</label><label kind="assignment" x="120" y="320">end := true</label></transition><transition><source ref="id2"/><target ref="id4"/><label kind="guard" x="24" y="232">p &lt; n</label><label kind="synchronisation" x="24" y="247">Go !</label></transition><transition><source ref="id3"/><target ref="id6"/><label kind="synchronisation" x="72" y="128">Go !</label><label kind="assignment" x="80" y="144">i++</label><nail x="112" y="168"/></transition><transition><source ref="id5"/><target ref="id2"/><label kind="synchronisation" x="48" y="312">Go !</label><label kind="assignment" x="-28" y="336">p++</label><nail x="56" y="400"/><nail x="56" y="360"/></transition><transition><source ref="id4"/><target ref="id5"/><label kind="guard" x="-100" y="306">p == c</label><label kind="synchronisation" x="-100" y="321">Go !</label><label kind="assignment" x="-152" y="336">buff := a[p]</label></transition><transition><source ref="id7"/><target ref="id2"/><label kind="synchronisation" x="144" y="248">Go !</label><nail x="136" y="272"/><nail x="120" y="272"/></transition><transition><source ref="id6"/><target ref="id7"/><label kind="guard" x="256" y="192">i &gt;= n</label><label kind="synchronisation" x="256" y="208">Go !</label></transition><transition><source ref="id6"/><target ref="id3"/><label kind="guard" x="192" y="64">i &lt; n</label><label kind="synchronisation" x="192" y="80">Go !</label><label kind="assignment" x="192" y="96">a[i] := in_array[i]</label></transition></template><template><name x="5" y="5">Consumer</name><declaration>
int b[n];
int i;			//counters must be declared in Uppaal
bool end := false;</declaration><location id="id8" x="288" y="456"><name x="278" y="426">CS</name></location><location id="id9" x="400" y="440" color="#ff00ff"><name x="424" y="432">EXIT</name></location><location id="id10" x="456" y="368"></location><location id="id11" x="512" y="272"></location><location id="id12" x="400" y="272"></location><location id="id13" x="288" y="272"></location><location id="id14" x="288" y="176"><name x="272" y="136">Start</name></location><location id="id15" x="216" y="272"><name x="192" y="232">WAIT</name></location><init ref="id14"/><transition><source ref="id15"/><target ref="id13"/><label kind="guard" x="136" y="128">p == c</label><label kind="synchronisation" x="144" y="144">Go !</label><nail x="120" y="176"/><nail x="216" y="168"/></transition><transition><source ref="id8"/><target ref="id13"/><label kind="synchronisation" x="256" y="344">Go !</label><label kind="assignment" x="256" y="360">c++</label></transition><transition><source ref="id12"/><target ref="id9"/><label kind="guard" x="352" y="328">i &gt;= n</label><label kind="synchronisation" x="360" y="344">Go !</label><label kind="assignment" x="340" y="356">end := true</label><nail x="400" y="312"/><nail x="400" y="336"/></transition><transition><source ref="id12"/><target ref="id10"/><label kind="guard" x="432" y="304">i &lt; n</label><label kind="synchronisation" x="424" y="288">Go !</label><nail x="416" y="304"/></transition><transition><source ref="id11"/><target ref="id12"/><label kind="synchronisation" x="488" y="200">Go !</label><label kind="assignment" x="488" y="216">i++</label><nail x="448" y="176"/></transition><transition><source ref="id10"/><target ref="id11"/><label kind="synchronisation" x="504" y="304">Go !</label><label kind="assignment" x="504" y="320">out_array[i] := b[i]</label></transition><transition><source ref="id13"/><target ref="id12"/><label kind="guard" x="320" y="272">c &gt;= n</label><label kind="synchronisation" x="320" y="288">Go !</label></transition><transition><source ref="id13"/><target ref="id15"/><label kind="guard" x="232" y="240">c &lt; n</label><label kind="synchronisation" x="240" y="224">Go !</label></transition><transition><source ref="id14"/><target ref="id13"/></transition><transition><source ref="id15"/><target ref="id8"/><label kind="guard" x="104" y="360">p &gt; c</label><label kind="synchronisation" x="104" y="376">Go !</label><label kind="assignment" x="104" y="392">b[c] := buff</label><nail x="216" y="344"/><nail x="216" y="424"/><nail x="216" y="424"/><nail x="216" y="456"/></transition></template><template><name x="5" y="5">Hurry</name><location id="id16" x="256" y="136"></location><init ref="id16"/><transition><source ref="id16"/><target ref="id16"/><label kind="synchronisation" x="240" y="184">Go ?</label><nail x="208" y="184"/><nail x="288" y="184"/></transition></template><system>//Insert process assignments.
P := Producer ();
C := Consumer ();
H := Hurry ();
//Edit system definition.
system P, C, H;</system></nta>